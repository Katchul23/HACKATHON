# classification_agent.py am√©lior√©
from pathlib import Path

from corpus.models.classify_model import DataClassifierModel
from corpus.utils.logger import log_low_confidence  # √Ä cr√©er pour journaliser les pr√©dictions faibles


class ClassificationAgent:
    def __init__(self, confidence_threshold=0.6, model_path=None):
        self.name = "ClassificationAgent"
        if model_path is None:
            base_dir = Path(__file__).resolve().parent.parent.parent  # remonte √† /DataTrace
            model_path = base_dir / "corpus" / "models" / "saved" / "final_classifier_50k.joblib"

        print(f"üìÇ Tentative de chargement du mod√®le depuis : {model_path}")
        self.model = DataClassifierModel(model_path=str(model_path))
        self.confidence_threshold = confidence_threshold

        # üîπ Mots-cl√©s fran√ßais - Primaire
        self.primary_keywords = [
            "notre √©tude", "nous avons collect√©", "donn√©es recueillies", "enqu√™te men√©e",
            "mesures effectu√©es", "observations r√©alis√©es", "donn√©es produites",
            "collecte sur le terrain", "questionnaire administr√©", "√©chantillons pr√©lev√©s",
            "campagne de terrain", "logiciel propri√©taire utilis√©", "capteur", "enqu√™te locale"
        ]

        # üîπ Mots-cl√©s fran√ßais - Secondaire
        self.secondary_keywords = [
            "publi√©es par", "source", "rapport", "archives", "base de donn√©es existante",
            "donn√©es issues de", "provenant de", "donn√©es t√©l√©charg√©es", "reprise de donn√©es",
            "archives historiques", "donn√©es ant√©rieures", "mod√®les existants", "rapports minist√©riels"
        ]

        # üîπ Mots-cl√©s anglais - Primaire
        self.primary_keywords += [
            "we collected", "data we gathered", "in our study", "experiment conducted",
            "data were obtained", "measured values", "survey conducted", "data were generated",
            "data collection", "observed data", "field campaign", "questionnaire administered",
            "sensor data", "sampling", "software used to process"
        ]

        # üîπ Mots-cl√©s anglais - Secondaire
        self.secondary_keywords += [
            "data from", "according to", "dataset downloaded", "source:",
            "based on report", "archival data", "data retrieved", "existing database",
            "data reused", "cited from", "prior models", "historical archives",
            "previous studies", "secondary sources", "did not involve new data"
        ]

    def classify(self, citation_text, section_name=None):
        """
        Classifie une phrase comme citation de donn√©es primaires, secondaires ou inconnues.
        Combine approche heuristique + mod√®le supervis√© avec seuil de confiance.

        Args:
            citation_text (str): Phrase contenant une citation de donn√©es.
            section_name (str): Nom de la section du texte (optionnel).

        Returns:
            str: "primaire", "secondaire" ou "inconnu"
        """
        text = citation_text.lower()

        # üîç √âtape 1 : Heuristique contextuelle
        if any(keyword in text for keyword in self.primary_keywords):
            if section_name and section_name.lower() in ["m√©thodes", "methods"]:
                return "primaire"
            return "primaire"
        elif any(keyword in text for keyword in self.secondary_keywords):
            return "secondaire"

        # üß† √âtape 2 : Mod√®le supervis√© avec seuil
        try:
            label, confidence = self.model.predict_with_confidence(citation_text)
            if confidence >= self.confidence_threshold:
                return label
            else:
                log_low_confidence(citation_text, label, confidence)
                return "inconnu"
        except Exception as e:
            print(f"[ClassificationAgent] ‚ö†Ô∏è Erreur de pr√©diction : {e}")
            return "inconnu"
